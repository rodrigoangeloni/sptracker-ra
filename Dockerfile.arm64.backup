# Dockerfile para compilación sptracker ARM64
# ==========================================
# 
# Este Dockerfile compila sptracker para arquitectura ARM 64-bit
# usando una imagen base optimizada y un entorno estandarizado.
#
# USO:
#   docker build -f Dockerfile.arm64 -t sptracker-arm64 .
#   docker run --rm -v "${PWD}/versions:/app/versions" sptracker-arm64
#

# Utiliza el argumento TARGETPLATFORM para establecer la plataforma de destino
ARG TARGETPLATFORM=linux/arm64
FROM --platform=${TARGETPLATFORM} python:3.11-slim AS builder

ARG TARGETPLATFORM # Redeclarar ARG para que esté disponible en las siguientes etapas

# Metadatos
LABEL maintainer="sptracker-dev"
LABEL description="sptracker ARM64 build environment"
LABEL version="1.0"
LABEL architecture="arm64v8"

# Variables de entorno
ENV DEBIAN_FRONTEND=noninteractive
ENV APP_HOME=/app
ENV PYTHONUNBUFFERED=1
ENV TARGET_PLATFORM=$TARGETPLATFORM
# Limpiar configuraciones de pip problemáticas
ENV PIP_NO_BUILD_ISOLATION=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Variables de entorno
ENV DEBIAN_FRONTEND=noninteractive
ENV APP_HOME=/app
ENV PYTHONUNBUFFERED=1
ENV TARGET_PLATFORM=$TARGETPLATFORM
# Asegúrate de que PIP_TARGET usa una ruta que existe y es escribable
ENV PIP_TARGET=/app/vendor 
ENV PATH="/app/vendor/bin:${PATH}"

# Establecer el directorio de trabajo
WORKDIR ${APP_HOME}

# Agregado para verificar la versión de Debian de la imagen base
RUN cat /etc/os-release

# Limpiar cachés de apt y actualizar listas de paquetes
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

RUN apt-get update

# Instalar dependencias del sistema una por una o en grupos más pequeños si es necesario
RUN apt-get install -y --no-install-recommends \
    build-essential \
    libssl-dev \
    libffi-dev \
    python3-dev \
    libc-bin
RUN dpkg --configure -a
RUN rm -rf /var/lib/apt/lists/*

# Copiar los archivos del proyecto al directorio de trabajo en el contenedor
COPY . ${APP_HOME}

# Asegúrate de que los scripts de compilación sean ejecutables
# (Ajusta los nombres de los scripts si es necesario)
RUN if [ -f create_release.sh ]; then chmod +x create_release.sh; fi && \
    if [ -f create_release_arm64.sh ]; then chmod +x create_release_arm64.sh; fi && \
    if [ -f entrypoint.sh ]; then chmod +x entrypoint.sh; fi

# Crear entorno virtual ARM64
RUN python -m venv env/arm64

# Activar el entorno virtual e instalar dependencias Python una por una para evitar conflictos
RUN /bin/bash -c "source env/arm64/bin/activate && \
    pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir bottle && \
    pip install --no-cache-dir cherrypy && \
    pip install --no-cache-dir python-dateutil && \
    pip install --no-cache-dir simplejson && \
    pip install --no-cache-dir psycopg2-binary && \
    pip install --no-cache-dir --no-build-isolation apsw && \
    pip install --no-cache-dir pyinstaller"

# Instalar wsgi-request-logger por separado para evitar conflictos
RUN /bin/bash -c "source env/arm64/bin/activate && \
    pip install --no-cache-dir --no-build-isolation wsgi-request-logger"

# Crear directorio para versiones si no existe
RUN mkdir -p /app/versions

# Punto de entrada que ejecuta el script de compilación ARM64
ENTRYPOINT ["/app/create_release_arm64.sh"]
